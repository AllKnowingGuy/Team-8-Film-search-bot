from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes
import asyncio


async def launch_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Opens a menu of buttons to select necessary preferences
    """
    last_user_message = update.message.text
    has_visited = context.user_data.get('has_visited_menu')

    keyboard = [
        [KeyboardButton("üî§–ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton("üé≠–ñ–∞–Ω—Ä"), KeyboardButton("üåç–°—Ç—Ä–∞–Ω–∞")],
        [KeyboardButton("‚åõ–ì–æ–¥"), KeyboardButton("üèÜ–†–µ–π—Ç–∏–Ω–≥"), KeyboardButton("üîû–í–æ–∑—Ä–∞—Å—Ç")],
        [KeyboardButton("üéà–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ü¶á"), KeyboardButton("üòä–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüòî")],
        [KeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üìã")],
        [KeyboardButton("üîç - –ò—Å–∫–∞—Ç—å! - üîç")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    menu_greetings_messages = [
        '–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–µ–Ω—é!',
        '–•–æ—á–µ—à—å –µ—â—ë —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–æ–±—â–∏—Ç—å –æ —Ñ–∏–ª—å–º–µ?',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ - –º–æ—è –ø–∏—â–∞. –ù–æ –Ω–µ –ø–µ—Ä–µ–∫–æ—Ä–º–∏!',
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é! –í–∏–¥–∏—à—å –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞?'
    ]

    menu_message = """
–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –Ω–µ–π.
–ù–∞–ø–∏—Å–∞–ª(–∞) –Ω–µ —Ç–æ –∏–ª–∏ –Ω–∞–∂–∞–ª(–∞) –Ω–µ —Ç—É –∫–Ω–æ–ø–∫—É? –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏—Å—å –∏ –∏—Å–ø—Ä–∞–≤—å!

–ö–æ–≥–¥–∞ —É–∫–∞–∂–µ—à—å –≤—Å—ë, —á—Ç–æ –≤–∞–∂–Ω–æ, —Å–º–µ–ª–æ –Ω–∞–∂–∏–º–∞–π "–ò—Å–∫–∞—Ç—å!"
    """

    if has_visited is None:
        await update.message.reply_text(
            menu_greetings_messages[-1] + '\n' + menu_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        context.user_data['has_visited_menu'] = 'true'
    else:
        await update.message.reply_text(
            menu_greetings_messages[len(last_user_message) % 3] + '\n' + menu_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    context.user_data['waiting_for'] = 'menu_option'


async def ask_if_knows_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–¢–æ—á–Ω–æ"),KeyboardButton("–ü—Ä–∏–º–µ—Ä–Ω–æ")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    title_message = """
–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ —Ç—ã –∑–Ω–∞–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞?
    """
    await update.message.reply_text(title_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'type_of_title'


async def ask_for_precise_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    title_message = """
–í–≤–µ–¥–∏ –∂–µ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ:
    """
    await update.message.reply_text(title_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'precise_title'


async def ask_for_approximate_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    title_message = """
–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–Ω–∏—à—å:
    """
    await update.message.reply_text(title_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'approximate_title'


async def ask_for_genre(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Asks to enter or pick the genre
    """
    keyboard = [
        [KeyboardButton("–ö–æ–º–µ–¥–∏—è"), KeyboardButton("–î—Ä–∞–º–∞")],
        [KeyboardButton("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"), KeyboardButton("–•–æ—Ä—Ä–æ—Ä")],
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    genre_message = """
–ö–∞–∫–æ–π –∂–∞–Ω—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É —Ç–≤–æ–µ–≥–æ —Ñ–∏–ª—å–º–∞? –í—ã–±–µ—Ä–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π:
    """
    await update.message.reply_text(genre_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'genre'


async def ask_for_country(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Asks to enter or pick the country of filming
    """
    keyboard = [
        [KeyboardButton("–°–®–ê"), KeyboardButton("–§—Ä–∞–Ω—Ü–∏—è")],
        [KeyboardButton("–†–æ—Å—Å–∏—è"), KeyboardButton("–Ø–ø–æ–Ω–∏—è")],
        [KeyboardButton("–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"), KeyboardButton("–ò–Ω–¥–∏—è")],
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    genre_message = """
–í –∫–∞–∫–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–µ –±—ã–ª —Å–Ω—è—Ç —Ç–æ—Ç —Å–∞–º—ã–π —Ñ–∏–ª—å–º? –ù–∞–∑–æ–≤–∏ –µ—ë –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π:
    """
    await update.message.reply_text(genre_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'country'


async def ask_if_precise_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–¢–æ—á–Ω—ã–π –≥–æ–¥"), KeyboardButton("–ì–æ–¥ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    year_message = """
–í–∞–∂–µ–Ω –ª–∏ —Ç–µ–±–µ —Ç–æ—á–Ω—ã–π –≥–æ–¥, –∏–ª–∏ –æ–Ω –ø—Ä–æ—Å—Ç–æ –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–µ–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫?
    """
    await update.message.reply_text(year_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'type_of_year'


async def ask_for_precise_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    year_message = """
–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏ —ç—Ç–æ—Ç –≥–æ–¥ (—Ç–æ–ª—å–∫–æ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ):
    """
    await update.message.reply_text(year_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'precise_year'


async def ask_for_year_span(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    year_message = """
–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ (–¥–≤–∞ 4-–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1950-2000)
    """
    await update.message.reply_text(year_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'year_span'


async def ask_for_minimum_imdb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Asks to enter the minimum IMDB rating
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    rating_message = """
–†–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞ - —ç—Ç–æ –≤–∞–∂–Ω–æ! –£–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –ø–æ IMDB –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ñ–∏–ª—å–º–∞, –∏ —è –Ω–∞–π–¥—É —Ç–∞–∫–∏–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –±–∞–ª–ª –≤—ã—à–µ!

–í–≤–µ–¥–∏ —Ä–µ–π—Ç–∏–Ω–≥ - —Ü–µ–ª–æ–µ –∏–ª–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10 (–≤ –¥—Ä–æ–±–Ω–æ–º —á–∏—Å–ª–µ —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ –∏ –¥–µ—Å—è—Ç—ã–µ, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –¢–û–ß–ö–û–ô, –Ω–∞–ø—Ä–∏–º–µ—Ä, 8.7):
    """
    await update.message.reply_text(rating_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'minimum_IMDB'


async def ask_for_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Asks to enter the age
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    age_message = """
    –Ø –∑–Ω–∞—é —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏, –µ—Å–ª–∏ —Ç—ã —Å–ª–∏—à–∫–æ–º –º–æ–ª–æ–¥(–∞). –ß—Ç–æ–±—ã —è —Å–ª—É—á–∞–π–Ω–æ –∏—Ö –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª, —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (—è –±—É–¥—É –¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ –≤ —Å–µ–∫—Ä–µ—Ç–µ, –æ–±–µ—â–∞—é!)

–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç - —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ:
    """
    await update.message.reply_text(age_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'age'


async def ask_for_keywords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Asks to enter the keywords
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    keywords_message = """
    –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –µ—â—ë —Ç–æ—á–Ω–µ–µ, –µ—Å–ª–∏ —Ç—ã —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, –∫—Ç–æ –∏–ª–∏ —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–∏–ª—å–º–µ. –ù–∞–∑–æ–≤–∏ –º–Ω–µ –ª—é–±—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π!

–í–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
    """
    await update.message.reply_text(keywords_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'keywords'


async def ask_for_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Description
    """
    keyboard = [
        [KeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    mood_message = """
–Ø –ø–æ–¥–±–µ—Ä—É —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ç–≤–æ—ë —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –°–∫–∞–∂–∏, –∫–∞–∫–æ–µ –æ–Ω–æ —É —Ç–µ–±—è?
    """
    await update.message.reply_text(mood_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'mood'


async def process_menu_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str | None:
    """
    Receives and processes a chosen menu option
    """
    chosen_option = update.message.text
    if chosen_option == "üî§–ù–∞–∑–≤–∞–Ω–∏–µ":
        await ask_if_knows_title(update, context)
    elif chosen_option == "üé≠–ñ–∞–Ω—Ä":
        await ask_for_genre(update, context)
    elif chosen_option == "üåç–°—Ç—Ä–∞–Ω–∞":
        await ask_for_country(update, context)
    elif chosen_option == "‚åõ–ì–æ–¥":
        await ask_if_precise_year(update, context)
    elif chosen_option == "üèÜ–†–µ–π—Ç–∏–Ω–≥":
        await ask_for_minimum_imdb(update, context)
    elif chosen_option == "üîû–í–æ–∑—Ä–∞—Å—Ç":
        await ask_for_age(update, context)
    elif chosen_option == "üéà–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ü¶á":
        await ask_for_keywords(update, context)
    elif chosen_option == "üòä–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüòî":
        await ask_for_mood(update, context)
    elif chosen_option == "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è üìã":
        return 'Show preferences'
    elif chosen_option == "üîç - –ò—Å–∫–∞—Ç—å! - üîç":
        return 'Launch the search'
    else:
        await update.message.reply_text('–ö–∞–∂–µ—Ç—Å—è, —Ç–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ —É –º–µ–Ω—è –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é!', parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(2)
        await launch_menu(update, context)


async def process_preference(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str | None:
    """
    Receives and processes different types of chosen preferences
    """
    # user_id = update.effective_user.id
    user_message = update.message.text
    waiting_for = context.user_data.get('waiting_for')

    # Special actions with returns for special buttons
    if user_message == '–ù–∞–∑–∞–¥':
        return 'Back to menu'
    elif user_message == '–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç':
        await update.message.reply_text(
            '–°–±—Ä–æ—Å–∏–ª —ç—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞!',
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardRemove())
        return 'Reset the answer'

    # Name routes
    if waiting_for == 'type_of_title':
        if user_message == '–¢–æ—á–Ω–æ':
            await ask_for_precise_title(update, context)
        elif user_message == '–ü—Ä–∏–º–µ—Ä–Ω–æ':
            await ask_for_approximate_title(update, context)

    # Year routes
    elif waiting_for == 'type_of_year':
        if user_message == '–¢–æ—á–Ω—ã–π –≥–æ–¥':
            await ask_for_precise_year(update, context)
        elif user_message == '–ì–æ–¥ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ':
            await ask_for_year_span(update, context)

    # AI mistake correction
    elif waiting_for == 'mistake':
        if user_message == '–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ/–ü–æ–π–¥—ë—Ç –∏ —Ç–∞–∫':
            await goodbye_and_finish(update, context)
            return None
        elif user_message == '–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ —Å—Ç–∞—Ä—ã–º –¥–∞–Ω–Ω—ã–º':
            return 'Priming'
        elif user_message == '–ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–æ–≤–æ—Ä–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ':
            return 'Format ignoring'
        elif user_message == '–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤—ã–≤–æ–¥–∏—Ç —è–≤–Ω–æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é':
            return 'Incapacity'

    # Generic reception and saving
    else:
        if waiting_for == 'precise_title':
            await update.message.reply_text(
                '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–∞–ø–æ–º–Ω–∏–ª!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'approximate_title':
            await update.message.reply_text(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–ª–æ–≤–∞, –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–æ–±—Ä–∞—Ç—å –∏–∑ –Ω–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'genre':
            await update.message.reply_text(
                '–¢–∞–∫–æ–π –∂–∞–Ω—Ä –º—ã –æ–¥–æ–±—Ä—è–µ–º!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'country':
            await update.message.reply_text(
                '–ê —Ç—ã —Ü–µ–Ω–∏—Ç–µ–ª—å –∫–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏–∏ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'precise_year':
            await update.message.reply_text(
                '–ü–æ–π–¥—É –ø–æ–≥–ª—è–∂—É –∞—Ä—Ö–∏–≤—ã –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥)',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'year_span':
            await update.message.reply_text(
                '–ó–∞–ø–æ–º–Ω–∏–ª: –≥–æ–¥ —Ñ–∏–ª—å–º–∞ –±—É–¥–µ—Ç –≤ —ç—Ç–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'minimum_IMDB':
            await update.message.reply_text(
                '–Ø –∏ –Ω–µ —Ç–∞–∫–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∏–¥–∞–ª)',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'age':
            await update.message.reply_text(
                '–°–ø–∞—Å–∏–±–æ! ',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'keywords':
            await update.message.reply_text(
                '–ü–æ–ª—É—á–∏–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–ø–∞—Å–∏–±–æ!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        elif waiting_for == 'mood':
            await update.message.reply_text(
                '–ù–∞—Å—Ç—Ä–æ–π –ø–æ–Ω—è—Ç–µ–Ω, —Å–ø–∞—Å–∏–±–æ!',
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardRemove())
        return 'Save the answer'


async def ask_if_mistaken(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Asks if the AI answer needs to be corrected
    """
    keyboard = [
        [KeyboardButton("–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ/–ü–æ–π–¥—ë—Ç –∏ —Ç–∞–∫")],
        [KeyboardButton("–ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ —Å—Ç–∞—Ä—ã–º –¥–∞–Ω–Ω—ã–º")],
        [KeyboardButton("–ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–æ–≤–æ—Ä–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∏—à–Ω–µ–≥–æ")],
        [KeyboardButton("–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤—ã–≤–æ–¥–∏—Ç —è–≤–Ω–æ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    mistake_message = """
–¢–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç?
–ï—Å–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–∂–º–∏ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–æ–ø–∫—É.
–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –≤—ã–±–µ—Ä–∏ "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ/–ü–æ–π–¥—ë—Ç –∏ —Ç–∞–∫".
        """
    await update.message.reply_text(mistake_message, parse_mode='Markdown', reply_markup=reply_markup)
    context.user_data['waiting_for'] = 'mistake'


async def goodbye_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Finishes the work
    """
    last_message = """
    –¢–æ–≥–¥–∞ —è –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É!

–†–∞–¥ –±—ã–ª –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π! –û–Ω–æ –ø–æ–º–æ–≥–ª–æ –º–Ω–µ —Å—Ç–∞—Ç—å —á—É—Ç–æ—á–∫—É –ª—É—á—à–µ!

–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–∑–≤–∞—Ç—å –º–µ–Ω—è –Ω–∞ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start!
    """
    await update.message.reply_text(
        last_message,
        parse_mode='Markdown'
    )
    context.user_data['has_visited_menu'] = None
    context.user_data['waiting_for'] = None
    context.user_data['sent_database'] = None

